Error 페이지 만들기
<!-- 에러가 났을때 코드 종류에 따라서 따로 Servlet요청을 할 수 있음
404(페이지 찾을수 없음) => 404.er 요청 = > 해당하는 요청을 받는 Servlet -> 404.jsp로 이동을 시킴
  -->
① 따왔던 404,401.500번 일단 jsp파일로 다시 바꿔줘! 위에도 디렉티브 태그 만들어주기
② 폴더 따로 만들어서 모아주기
③ 그 다음 webapp-> WEB-INF 파일에 있는 web.xml에 들어가
④ 맨밑에  

<error-page>
    <error-code>401</error-code> //어떤오류?!
    <location>/error</location>  //위치! 401에러가 났을때 뭘 요청할것이냐
 </error-page>
 <error-page>
    <error-code>404</error-code>
    <location>/404.er</location>
 </error-page>
 <error-page>
    <error-code>500</error-code>
    <location>/500.er</location>
 </error-page>

</web-app> //진짜 맨밑에다가 덜렁 하지 말구 안에 써줘;

⑤ controller로 가서 ErrorController Servlet만들어줘
 @WebServlet("*.er")
public class ErrorController extends HttpServlet {
	
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("에러 확인~~");
		System.out.println(request.getServletPath());
		// 에러 확인~~
		// /404.er

	
	}

}


⑥ 그 뒤는 똑같아 요청받으면 보내고~ if문 만들고~
String uri = request.getServletPath();
	String view = "";
		
	if(uri.equals("/404.er")) {
	   view = "error/404.jsp";
	}else if (uri.equals("/401.er")) {
 	   view = "error/401.jsp";
	}else if (uri.equals("/500.er")) {
	   view = "error/500.jsp";
	}else {
	   response.getWriter().println("<a>나중에 에러처리 할 예정 </a>");
	   return; // 이미 응답을함( ↑) 다시 포워드가 처리되지 않게 막음	
	}
// 401, 404, 500 외에 에러처리가 안되는 페이지가 나온다면
// default로 보여줄수있는 에러페이지를 만들예정!
	request.getRequestDispatcher(view).forward(request, response);
		
	}